<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Responsive Timetable</title>
  <style>
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: "Segoe UI", Arial, sans-serif;
      background: #f4f6f9;
      color: #333;
      padding: 40px 20px;
      display: flex;
      justify-content: center;
    }

    
    .table-container {
      width: 100%;
      max-width: 1000px;
      background: #fff;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.08);
      overflow-x: auto;
    }

    caption {
      font-size: 1.8em;
      margin-bottom: 15px;
      font-weight: bold;
      color: #222;
      text-align: left;
    }

    
    table {
      width: 100%;
      border-collapse: collapse;
      min-width: 600px;
    }

    th, td {
      padding: 14px 12px;
      text-align: center;
      border: 1px solid #e0e0e0;
      font-size: 15px;
    }

    th {
      background: #0077cc;
      color: #fff;
      text-transform: uppercase;
      font-size: 14px;
      letter-spacing: 0.5px;
    }

    tr:nth-child(even) td {
      background: #f9fbff;
    }

    tr:hover td {
      background: #e6f0ff;
      transition: 0.3s;
    }

    td {
      color: #444;
    }

    
    .break {
      background: #ffecec !important;
      font-weight: bold;
      color: #d32f2f;
      text-align: center;
    }

    
    @media (max-width: 768px) {
      caption {
        font-size: 1.4em;
        text-align: center;
      }
      th, td {
        font-size: 13px;
        padding: 10px;
      }
    }
  </style>
</head>
<body>

  <div class="table-container">
    <table>
      <caption>Weekly Timetable</caption>
      <tr>
        <th>Time</th>
        <th>Monday</th>
        <th>Tuesday</th>
        <th>Wednesday</th>
        <th>Thursday</th>
        <th>Friday</th>
      </tr>
      <tr>
        <td>08:00 - 09:00</td>
        <td>Maths</td>
        <td>Science</td>
        <td>English</td>
        <td>Geography</td>
        <td>IT</td>
      </tr>
      <tr>
        <td>09:00 - 10:00</td>
        <td>English</td>
        <td>Maths</td>
        <td>History</td>
        <td>Science</td>
        <td>Commerce</td>
      </tr>
      <tr>
        <td>10:00 - 11:00</td>
        <td colspan="5" class="break">Break</td>
      </tr>
      <tr>
        <td>11:00 - 12:00</td>
        <td>Science</td>
        <td>Geography</td>
        <td>Maths</td>
        <td>History</td>
        <td>English</td>
      </tr>
      <tr>
        <td>12:00 - 01:00</td>
        <td>IT</td>
        <td>English</td>
        <td>Commerce</td>
        <td>Science</td>
        <td>Maths</td>
      </tr>
    </table>
  </div>

</body>
</html>

import java.util.Scanner;

public class RunLengthEncoding {

    public static String encode(String text) {
        StringBuilder encoded = new StringBuilder();
        int count = 1;

        for (int i = 1; i < text.length(); i++) {
            if (text.charAt(i) == text.charAt(i - 1)) {
                count++;
            } else {
                encoded.append(text.charAt(i - 1)).append(count);
                count = 1;
            }
        }
        
        encoded.append(text.charAt(text.length() - 1)).append(count);

        return encoded.toString();
    }

    
    public static String decode(String encoded) {
        StringBuilder decoded = new StringBuilder();
        for (int i = 0; i < encoded.length(); i++) {
            char ch = encoded.charAt(i);
            StringBuilder countStr = new StringBuilder();

            
            while (i + 1 < encoded.length() && Character.isDigit(encoded.charAt(i + 1))) {
                countStr.append(encoded.charAt(++i));
            }

            int count = Integer.parseInt(countStr.toString());
            
            decoded.append(String.valueOf(ch).repeat(count));
        }
        return decoded.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        
        System.out.print("Enter a string to encode: ");
        String text = scanner.nextLine();

        
        String encoded = encode(text);
        System.out.println("Encoded: " + encoded);

        
        String decoded = decode(encoded);
        System.out.println("Decoded: " + decoded);

        scanner.close();
    }
	
	public static void main(String[] args) {
        String text = "aaabbccccddee";

        String encoded = encode(text);
        String decoded = decode(encoded);

        System.out.println("Original: " + text);
        System.out.println("Encoded:  " + encoded);
        System.out.println("Decoded:  " + decoded);
    }
	
	public static void main(String[] args) {
        String text = "aaabbccccddee";

        String encoded = encode(text);
        String decoded = decode(encoded);

        System.out.println("Original: " + text);
        System.out.println("Encoded:  " + encoded);
        System.out.println("Decoded:  " + decoded);
    }
}


import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class MedianCutQuantizer {

    public static void main(String[] args) throws IOException {
        File inputFile = new File("spaceman.jpg");
        BufferedImage image = ImageIO.read(inputFile);

        int numColors = 2;

        BufferedImage quantizedImage = quantizeImage(image, numColors);
        ImageIO.write(quantizedImage, "png", new File("quantized_output4.png"));
        System.out.println("Image quantization completed successfully!");
    }

    public static BufferedImage quantizeImage(BufferedImage image, int numColors) {
        
        List<Color> colors = new ArrayList<>();
        for (int y = 0; y < image.getHeight(); y++) {
            for (int x = 0; x < image.getWidth(); x++) {
                int rgb = image.getRGB(x, y);
                colors.add(new Color(
                    (rgb >> 16) & 0xFF,
                    (rgb >> 8) & 0xFF,
                    rgb & 0xFF  
                ));
            }
        }

       
        List<Color> palette = medianCut(colors, numColors);

       
        BufferedImage result = new BufferedImage(
            image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);

        for (int y = 0; y < image.getHeight(); y++) {
            for (int x = 0; x < image.getWidth(); x++) {
                int rgb = image.getRGB(x, y);
                Color original = new Color(
                    (rgb >> 16) & 0xFF,
                    (rgb >> 8) & 0xFF,
                    rgb & 0xFF
                );
                
                Color closest = findClosestColor(original, palette);
                result.setRGB(x, y, (closest.r << 16) | (closest.g << 8) | closest.b);
            }
        }

        return result;
    }

    private static List<Color> medianCut(List<Color> colors, int colorCount) {
        List<List<Color>> buckets = new ArrayList<>();
        buckets.add(colors);

        while (buckets.size() < colorCount) {
            List<List<Color>> newBuckets = new ArrayList<>();
            
            for (List<Color> bucket : buckets) {
                if (bucket.isEmpty()) continue;
                
                
                int rMin = 255, rMax = 0;
                int gMin = 255, gMax = 0;
                int bMin = 255, bMax = 0;
                
                for (Color color : bucket) {
                    rMin = Math.min(rMin, color.r);
                    rMax = Math.max(rMax, color.r);
                    gMin = Math.min(gMin, color.g);
                    gMax = Math.max(gMax, color.g);
                    bMin = Math.min(bMin, color.b);
                    bMax = Math.max(bMax, color.b);
                }
                
                int rRange = rMax - rMin;
                int gRange = gMax - gMin;
                int bRange = bMax - bMin;
                
               
                int channel = 0;
                int maxRange = rRange;
                
                if (gRange > maxRange) {
                    maxRange = gRange;
                    channel = 1;
                }
                if (bRange > maxRange) {
                    maxRange = bRange;
                    channel = 2;
                }
                
                
                final int sortChannel = channel;
                Collections.sort(bucket, new Comparator<Color>() {
                    @Override
                    public int compare(Color c1, Color c2) {
                        switch (sortChannel) {
                            case 0: return Integer.compare(c1.r, c2.r);
                            case 1: return Integer.compare(c1.g, c2.g);
                            case 2: return Integer.compare(c1.b, c2.b);
                            default: return 0;
                        }
                    }
                });
                
                
                int medianIndex = bucket.size() / 2;
                newBuckets.add(new ArrayList<>(bucket.subList(0, medianIndex)));
                newBuckets.add(new ArrayList<>(bucket.subList(medianIndex, bucket.size())));
            }
            
            buckets = newBuckets;
        }
        
        
        List<Color> palette = new ArrayList<>();
        for (List<Color> bucket : buckets) {
            if (bucket.isEmpty()) continue;
            
            int rSum = 0, gSum = 0, bSum = 0;
            for (Color color : bucket) {
                rSum += color.r;
                gSum += color.g;
                bSum += color.b;
            }
            
            palette.add(new Color(rSum / bucket.size(), gSum / bucket.size(), bSum / bucket.size()));
        }
        
        return palette;
    }

    private static Color findClosestColor(Color target, List<Color> palette) {
        Color closest = palette.get(0);
        int minDistance = Integer.MAX_VALUE;
        
        for (Color color : palette) {
            int distance = colorDistance(target, color);
            if (distance < minDistance) {
                minDistance = distance;
                closest = color;
            }
        }
        
        return closest;
    }

    private static int colorDistance(Color c1, Color c2) {
        int dr = c1.r - c2.r;
        int dg = c1.g - c2.g;
        int db = c1.b - c2.b;
        return dr * dr + dg * dg + db * db;
    }

    static class Color {
        int r, g, b;
        
        public Color(int r, int g, int b) {
            this.r = r;
            this.g = g;
            this.b = b;
        }
    }
}

import java.util.*;

public class LZW {

    
    public static List<Integer> compress(String input) {
        
        int dictSize = 256;
        Map<String, Integer> dictionary = new HashMap<>();
        for (int i = 0; i < 256; i++) {
            dictionary.put("" + (char) i, i);
        }

        String w = "";
        List<Integer> result = new ArrayList<>();

        for (char c : input.toCharArray()) {
            String wc = w + c;
            if (dictionary.containsKey(wc)) {
                w = wc;
            } else {
                result.add(dictionary.get(w));
                dictionary.put(wc, dictSize++);
                w = "" + c;
            }
        }

        if (!w.equals("")) {
            result.add(dictionary.get(w));
        }
        return result;
    }

    
    public static String decompress(List<Integer> compressed) {
        int dictSize = 256;
        Map<Integer, String> dictionary = new HashMap<>();
        for (int i = 0; i < 256; i++) {
            dictionary.put(i, "" + (char) i);
        }

        String w = "" + (char)(int)compressed.remove(0);
        StringBuilder result = new StringBuilder(w);

        for (int k : compressed) {
            String entry;
            if (dictionary.containsKey(k)) {
                entry = dictionary.get(k);
            } else if (k == dictSize) {
                entry = w + w.charAt(0);
            } else {
                throw new IllegalArgumentException("Bad compressed k: " + k);
            }

            result.append(entry);

            
            dictionary.put(dictSize++, w + entry.charAt(0));

            w = entry;
        }
        return result.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter text to compress: ");
        String input = scanner.nextLine();

        List<Integer> compressed = compress(input);
        System.out.println("Compressed: " + compressed);

        String output = decompress(new ArrayList<>(compressed));
        System.out.println("Decompressed: " + output);

        scanner.close();
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Career Guidance Application</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #e8ecef;
            margin: 0;
            padding: 20px;
            justify-content: center;
        }
        .container {
			margin:100px;
            background-color: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: inline-block;
			width:200px;
            font-weight: bold;
            margin-bottom: 5px;
        }
        input[type="text"],
        input[type="email"],
        input[type="date"] {
            width: 50%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }
        input[type="file"] {
            width: 50%;
        }
        .buttons {
            display: flex;
            justify-content: space-between;
        }
        button {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
			width:250px;
        }
        .submit-btn {
            background-color: #2ecc71;
            color: white;
        }
        .clear-btn {
            background-color: #f1c40f;
            color: white;
        }
    </style>
</head>
<body>
	<h1>Career Guidance Application</h1>
    <div class="container">
        <div class="form-group">
            <label for="firstName">First Name:</label>
            <input type="text" id="firstName" name="firstName">
        </div>
        <div class="form-group">
            <label for="lastName">Last Name:</label>
            <input type="text" id="lastName" name="lastName">
        </div>
        <div class="form-group">
            <label for="email">E-mail:</label>
            <input type="email" id="email" name="email">
        </div>
        <div class="form-group">
            <label for="cv">Upload your CV:</label>
            <input type="file" id="cv" name="cv">
        </div>
        <div class="form-group">
            <label>Education BG:</label>
            <div class="radio-group">
                <input type="radio" id="afterOIL" name="education" value="After OIL">
                <label for="afterOIL">After OIL</label>
            </div>
            <div class="radio-group">
                <input type="radio" id="afterAL" name="education" value="After A/L">
                <label for="afterAL">After A/L</label>
            </div>
            <div class="radio-group">
                <input type="radio" id="underGraduate" name="education" value="Under Graduate">
                <label for="underGraduate">Under Graduate</label>
            </div>
        </div>
        <div class="form-group">
            <label for="availableDate">Available Dtae:</label>
            <input type="date" id="availableDate" name="availableDate">
        </div>
        <div class="buttons">
            <button class="submit-btn">Submit</button>
            <button class="clear-btn">Clear</button>
        </div>
    </div>
</body>
</html>
